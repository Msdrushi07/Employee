Docker Compose is a tool used to define and run multi-container Docker applications using a single file — usually docker-compose.yml. It’s perfect for setting up services like:
ELK Stack (Elasticsearch, Logstash, Kibana)
Prometheus + Grafana
Spring Boot + MySQL
And more

Project Structure

springboot-mysql-app/
├── Dockerfile
├── docker-compose.yml
├── src/
├── target/
└── application.properties (or application.yml)

Step 1: Dockerfile for Spring Boot
# Dockerfile
FROM openjdk:17
WORKDIR /app
COPY target/*.jar app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]

Step 2: Update application.properties
Ensure Spring Boot talks to mysql (the service name in Compose, not localhost):
spring.datasource.url=jdbc:mysql://mysql:3306/demo_db
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

Step 3: docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: default

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: demo_db
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql

volumes:
  mysql-data:

Step 4: Build and Run
# Build and start both services
docker-compose up --build

 To Stop docker-compose down
To stop and remove volumes too:docker-compose down -v

if used 
docker-compose up -d
Build (if needed) and run all services
Start them in background
You can still view logs via:
docker-compose logs -f


General Structure of docker-compose.yml
version: '3.8'  # Define the compose file format version

services:  # Define all containers here

  <service-name>:
    image: <image-name> OR
    build: .
      context: .  # Path to Dockerfile
      dockerfile: Dockerfile  # Optional if not named "Dockerfile"
    container_name: <optional-custom-name>
    ports:
      - "<host-port>:<container-port>"  # e.g., "8080:8080"
    environment:
      VAR_NAME1: value1
      VAR_NAME2: value2
    env_file:
      - .env  # Optional: Use external file for env vars
    volumes:
      - <host-path>:<container-path>  # e.g., "./logs:/app/logs"
    depends_on:
      - <another-service-name>  # Wait for this container to start
    restart: always  # Restart policy: no | always | on-failure | unless-stopped
    command: <custom-start-command>  # Override default CMD
    networks:
      - <custom-network>

# Optional: Define shared networks
networks:
  <custom-network>:
    driver: bridge

# Optional: Define shared volumes
volumes:
  <volume-name>:

 Real-World Example (Spring Boot + MySQL)
version: '3.8'

services:
  app:
    build: .
    image: my-springboot-app:latest   // If You Want to Set the Image Name Manually after building else project_Structure_name_appname
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: default
    depends_on:
      - mysql
    networks:
      - backend

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend

networks:
  backend:

volumes:
  mysql-data:


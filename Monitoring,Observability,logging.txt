Spring Boot Actuator + Micrometer
1Ô∏è‚É£ Add Dependencies in pom.xml
<!-- Spring Boot Actuator -->
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

<!-- Micrometer Prometheus Registry -->
<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-registry-prometheus</artifactId>
</dependency>

2Ô∏è‚É£ Update application.yml
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
3Ô∏è‚É£ Run Your App and Test
‚úÖ http://localhost:8080/actuator/health ‚Üí Basic health

‚úÖ http://localhost:8080/actuator/metrics ‚Üí All available metrics

‚úÖ http://localhost:8080/actuator/prometheus ‚Üí Prometheus-friendly metrics format

Prometheus Integration
 1. Download Prometheus
Go to the official site and download the binary for your OS

‚úÖ 2. Create/Edit Prometheus Config File
global:
  scrape_interval: 15s  # How often to scrape metrics

scrape_configs:
  - job_name: 'spring-boot-app'
    metrics_path: '/actuator/prometheus'
    static_configs:
      - targets: ['localhost:8080']  # Update if your Spring Boot runs on a different port

‚úÖ 3. Run Prometheus
./prometheus --config.file=prometheus.yml

You should see logs like:
level=info msg="Server is ready to receive web requests."

4Ô∏è‚É£ Open Prometheus in Browser
http://localhost:9090

5Ô∏è‚É£ Verify Your Spring Boot App is Scraped
http://localhost:9090/targets

You should see spring-boot-app listed and status: UP

Grafana Setup + Dashboards
‚úÖ 1. Download & Install Grafana
Go to: üëâ https://grafana.com/grafana/download

Download the Windows Installer

Run the installer (it will create a Grafana service)

Once installed, Grafana runs on:

üåê http://localhost:3000

‚úÖ 3. Add Prometheus as a Data Source
In the left sidebar, go to ‚öôÔ∏è ‚Üí Data Sources

Click "Add data source"

Choose Prometheus
Set the URL as:
http://localhost:9090

Click Save & Test
‚úÖ ‚ÄúData source is working‚Äù

‚úÖ 4. Import Prebuilt Dashboards (Optional but Recommended)
Click on the + icon ‚Üí Import

Use a popular Prometheus dashboard ID like:
4701  or 7587

Set Prometheus as the data source when prompted

Click Import

Logging with ELK Stack
‚úÖ Option: Use Dockerized ELK Stack
‚úÖ 2. Use Prebuilt ELK Stack with Docker Compose
Create a file:
üìÑ docker-compose.yml in a new folder, and paste:
version: '3.7'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    ports:
      - "5000:5000"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - elk

networks:
  elk:
    driver: bridge


‚úÖ 3. Create a logstash.conf file (same folder)
üìÑ logstash.conf
input {
  tcp {
    port => 5000
    codec => json
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "springboot-logs"
  }
  stdout { codec => rubydebug }
}

‚úÖ 4. Start the ELK Stack
From the folder where your docker-compose.yml is:
docker-compose up -d
‚úî This runs:

Elasticsearch on http://localhost:9200

Kibana on http://localhost:5601

Logstash listening on port 5000 for logs

http://localhost:9200/_cat - to check indices

‚úÖ 5. Configure Spring Boot to Send Logs to Logstash
‚ûï Add dependency in pom.xml
<dependency>
    <groupId>net.logstash.logback</groupId>
    <artifactId>logstash-logback-encoder</artifactId>
    <version>6.6</version> for spring boot 3.x 7.4
</dependency>

 Update application.yml
logging:
  level:
    root: INFO
  logstash:
    enabled: true

---

logging.pattern.console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

---

spring:
  application:
    name: my-microservice

Add logback-spring.xml (in src/main/resources)
<configuration>
  <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
    <destination>localhost:5000</destination>
    
    <encoder class="net.logstash.logback.encoder.LogstashEncoder" />
  </appender>

  <root level="INFO">
    <appender-ref ref="LOGSTASH"/>
  </root>
</configuration>




‚úÖ 7. View Logs in Kibana
Visit:

http://localhost:5601

Click:

"Stack Management ‚Üí kibana -> Index Patterns"

Create a new index pattern:
springboot-logs*
Select @timestamp as time filter field
Now go to Discover tab ‚Äî and boom üí• your live logs are there, searchable and filterable!

Zipkin + Spring Cloud Sleuth for distributed tracing
Step 1: Add Dependencies
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-zipkin</artifactId>
</dependency>

<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>

<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-dependencies</artifactId>
      <version>2021.0.8</version> <!-- Compatible with Spring Boot 2.7.x -->
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>

if gets error for zipkin
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-zipkin</artifactId>
  <version>2.2.8.RELEASE</version> <!-- Matches 2021.0.8 BOM -->
</dependency>

 Step 2: Configure application.yml or application.properties
spring:
  zipkin:
    base-url: http://localhost:9411
    enabled: true
    sender:
      type: web
  sleuth:
    sampler:
      probability: 1.0  # Trace 100% of requests

 Step 3: Run Zipkin via Docker
docker run -d -p 9411:9411 openzipkin/zipkin

Run your app, hit http://localhost:8080/hello, and then check the trace in the Zipkin UI.


Prometheus Alertmanager with Slack/Email Alerting
1. Create the alert-rules.yml file
This file defines the alert conditions.
Save it in the same directory as prometheus.yml:  (if docker is using)
groups:
  - name: spring-boot-alerts
    rules:
      - alert: HighErrorRate
        expr: rate(http_server_requests_seconds_count{status=~"5.."}[1m]) > 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "High 5xx Error Rate"
          description: "More than 0 5xx errors in the last 1 minute"

2. Update prometheus.yml to include rule and Alertmanager
rule_files:
  - "alert-rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - 'alertmanager:9093'

3. Create alertmanager.yml for Slack integration
global:
  resolve_timeout: 5m

route:
  receiver: 'slack-notifications'
  group_wait: 10s
  group_interval: 30s
  repeat_interval: 1h

receivers:
  - name: 'slack-notifications'
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/your/webhook/url'
        channel: '#your-channel-name'     // '#alerts'
        send_resolved: true

Replace the api_url with your actual Slack Incoming Webhook URL.

4. Update docker-compose.yml to add Alertmanager
Add this service to your docker-compose.yml
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - elk  # or your common network
5. Restart Docker Compose
docker-compose down
docker-compose up -d

6. Test Alert
Cause a 5xx error in your Spring Boot app and check:

Slack channel for alert

Alertmanager UI: http://localhost:9093

Prometheus UI: http://localhost:9090/alerts

Prometheus Alertmanager + Slack on Windows (Non-Docker Setup)
 Folder Structure (Recommended)
Place everything inside your Prometheus folder (or organized neatly):
prometheus-3.5.0.windows-amd64/
‚îú‚îÄ‚îÄ prometheus.yml
‚îú‚îÄ‚îÄ alert-rules.yml
‚îú‚îÄ‚îÄ alertmanager/
‚îÇ   ‚îú‚îÄ‚îÄ alertmanager.exe
‚îÇ   ‚îú‚îÄ‚îÄ alertmanager.yml
‚îÇ   ‚îî‚îÄ‚îÄ data/

Step 1: Download Alertmanager for Windows
Go to: https://prometheus.io/download/#alertmanager

Download the Windows .zip for alertmanager.

Extract it, and place the folder like this:
prometheus-3.5.0.windows-amd64/
‚îî‚îÄ‚îÄ alertmanager/
    ‚îú‚îÄ‚îÄ alertmanager.exe
    ‚îî‚îÄ‚îÄ alertmanager.yml

Step 5: Start Alertmanager
cd path\to\prometheus-3.5.0.windows-amd64\alertmanager
alertmanager.exe --config.file=alertmanager.yml
It will start on: http://localhost:9093

Step 6: Start Prometheus (with new config)
In another Command Prompt:
cd path\to\prometheus-3.5.0.windows-amd64
prometheus.exe --config.file=prometheus.yml

Step 7: Trigger an Alert
Try forcing a 5xx error in your Spring Boot app (e.g., throw exception), then:

Visit: http://localhost:9090/alerts

Check Slack for notification

Visit: http://localhost:9093 (Alertmanager UI)


Email Alerts
alertmanager.yml

global:
  smtp_smarthost: 'smtp.gmail.com:587'
  smtp_from: 'your.email@gmail.com'
  smtp_auth_username: 'your.email@gmail.com'
  smtp_auth_password: 'your-app-password'   # App password, not your Gmail login
  smtp_require_tls: true

route:
  receiver: 'email-notifications'
  group_wait: 10s
  group_interval: 30s
  repeat_interval: 1h

receivers:
  - name: 'email-notifications'
    email_configs:
      - to: 'recipient.email@example.com'
        send_resolved: true

mportant:
Gmail no longer supports less secure apps. You must create an App Password:

Go to https://myaccount.google.com/apppasswords

Select Mail and Windows Computer

Copy the 16-character password and use it as smtp_auth_password

alert-rules.yml
route:
  receiver: 'email-notifications'

  routes:
    - match:
        alertname: "HighMemoryUsage"
      receiver: "email-notifications"

Run Prometheus again:
./prometheus --config.file=prometheus.yml

Watch Alertmanager UI at:
http://localhost:9093

Check your Slack channel ‚Äî you should get an alert within 10‚Äì15 seconds if everything‚Äôs wired correctly.

Now, let's proceed with Email alerting via SMTP using Alertmanager.
We‚Äôll go step by step to:

Set up SMTP email in alertmanager.yml

Use the same alerting rule (for now)

Test it

Update alertmanager.yml
global:
  smtp_smarthost: 'smtp.gmail.com:587'
  smtp_from: 'your-email@gmail.com'
  smtp_auth_username: 'your-email@gmail.com'
  smtp_auth_password: 'your-app-password'  # not your Gmail password!
  smtp_require_tls: true

route:
  receiver: 'email-alert'

receivers:
  - name: 'email-alert'
    email_configs:
      - to: 'recipient-email@gmail.com'
        send_resolved: true
Important Notes:
üîê Use App Password for Gmail. If you're using Gmail, enable 2FA and create an App Password (select "Mail" ‚Üí "Windows Computer").

üõ°Ô∏è Never use your main email password ‚Äî always use app-specific passwords.

üì• smtp_from = sender email, to = receiver email.

relaunch the binary with the updated file:
./alertmanager --config.file=alertmanager.yml

Testing
Step 1: Get a Gmail App Password
If you're using Gmail, do this:

Go to üëâ https://myaccount.google.com/apppasswords

Log in with your Gmail account.

Under "Select App", choose Mail.

Under "Select Device", choose Other, name it something like "PrometheusAlertManager".

Click Generate.

You'll get a 16-character app password like: abcd efgh ijkl mnop

üí° Save it somewhere. This is what you'll use in the next step as your smtp_auth_password.



